<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>InsertSweat</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.cquccc.top/"/>
  <updated>2016-12-03T06:48:13.000Z</updated>
  <id>http://blog.cquccc.top/</id>
  
  <author>
    <name>Mr.Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript模块化编程</title>
    <link href="http://blog.cquccc.top/2016/12/03/js-module/"/>
    <id>http://blog.cquccc.top/2016/12/03/js-module/</id>
    <published>2016-12-03T06:37:39.000Z</published>
    <updated>2016-12-03T06:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="立即执行函数写发"><a href="#立即执行函数写发" class="headerlink" title="立即执行函数写发"></a>立即执行函数写发</h3><p>不暴露私有变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> _count=<span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> m1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//todo</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> m2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//todo</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">m1</span>:m2,</div><div class="line">    <span class="attr">m2</span>:m2</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h3><p>继承另一个模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1=(<span class="function"><span class="keyword">function</span>(<span class="params">mod</span>)</span>&#123;</div><div class="line">  mod.m3=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//..todo</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> mod;</div><div class="line">&#125;)(module1)</div></pre></td></tr></table></figure></p>
<p>为<code>module1</code>模块增加了一个新方法<code>m3()</code>，再放回新的<code>module1</code>模块</p>
<h3 id="宽放大模式"><a href="#宽放大模式" class="headerlink" title="宽放大模式"></a>宽放大模式</h3><p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1=(<span class="function"><span class="keyword">function</span>(<span class="params">mod</span>)</span>&#123;</div><div class="line">  <span class="comment">//..todo</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> mod;</div><div class="line">&#125;)(<span class="built_in">window</span>.module1||&#123;&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="输入全局变量"><a href="#输入全局变量" class="headerlink" title="输入全局变量"></a>输入全局变量</h3><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<br>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1=(<span class="function"><span class="keyword">function</span>(<span class="params">$,yui</span>)</span>&#123;</div><div class="line">  <span class="comment">//..todo</span></div><div class="line">&#125;)(jQuery,YAHOO);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;立即执行函数写发&quot;&gt;&lt;a href=&quot;#立即执行函数写发&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数写发&quot;&gt;&lt;/a&gt;立即执行函数写发&lt;/h3&gt;&lt;p&gt;不暴露私有变量&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; module1=(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m1=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//todo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m2=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//todo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;m1&lt;/span&gt;:m2,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;m2&lt;/span&gt;:m2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.cquccc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://blog.cquccc.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS创建对象的几种方法</title>
    <link href="http://blog.cquccc.top/2016/11/22/js-create-object/"/>
    <id>http://blog.cquccc.top/2016/11/22/js-create-object/</id>
    <published>2016-11-22T07:00:39.000Z</published>
    <updated>2016-11-22T14:08:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>由于考虑到ECMAScript中无法创建类，所以开发人员发明了一种函数，用函数来封装以特定接口来创建对象的细节，如下；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  o.name=name;</div><div class="line">  o.age=age;</div><div class="line">  o.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person=createPerson(<span class="string">'小明'</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure></p>
<p>特征：解决了创建多个相似对象问题，但却没有解决对象识别的问题，即怎样知道这个对象的类型。<br><a id="more"></a></p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>ECMAScript中的构造函数可以用来创建特定类型的对象，且构造函数始终都应以大写开头，例如将上面的例子重写如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name=name;</div><div class="line">  <span class="keyword">this</span>.age=age;</div><div class="line">  <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">21</span>);</div></pre></td></tr></table></figure></p>
<p>相比构造函数：</p>
<ol>
<li>没有显试的创建对象</li>
<li>直接将属性和方法赋给了this对象</li>
<li>没有return语句</li>
</ol>
<p>胜于工厂模式之处在于，可以区分对象类型，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(person.constructor==Person); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person);  <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><strong><em>这里之所以是Object的实例，是因为所有对象均继承自Object</em></strong></p>
<h4 id="将构造函数当做函数"><a href="#将构造函数当做函数" class="headerlink" title="将构造函数当做函数"></a>将构造函数当做函数</h4><p>既然构造函数也是个函数，那他就可一当做一个普通函数来调用,如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当做构造函数使用</span></div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">21</span>);</div><div class="line">person.sayName()<span class="comment">//小明</span></div><div class="line"><span class="comment">//当做普通函数使用</span></div><div class="line">Person(<span class="string">'小华'</span>,<span class="number">20</span>);</div><div class="line"><span class="built_in">window</span>.sayName()<span class="comment">//小明 在这里调用函数this始终指向Global对象</span></div></pre></td></tr></table></figure></p>
<h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>构造函数的主要问题在于每个方法都要在实例上重新创建一遍。上面例子中的<code>sayName()</code>方法在实例化时都要重新创建一遍，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">21</span>);</div><div class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person(<span class="string">'小华'</span>,<span class="number">21</span>);</div><div class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>为了解决这种问题我们可以使用下面的方式原型模式。</p>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>我们创建的每一个函数都有一个<code>prototype</code>(原型)属性，这个属性是一个指针，指向一个对象，这个对象的用途就是包含可以由特定类型的所有实例共享的属性和方法。<br>简单的来说使用它可以让所有对象实例共享它所包含的属性和方法。如下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name=<span class="string">"小明"</span>;</div><div class="line">Person.prototype.age=<span class="number">20</span>;</div><div class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</div><div class="line">person1.sayName() <span class="comment">//小明</span></div><div class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person();</div><div class="line">person2.sayName() <span class="comment">//小明</span></div><div class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h4 id="理解原型对象"><a href="#理解原型对象" class="headerlink" title="理解原型对象"></a>理解原型对象</h4><p>在默认情况下所有原型对象都会自动化获得一个<code>constructor</code>(构造函数)属性，这个属性是指向原型所在函数的指针。<br>各个对象之间的关系:<br><img src="/images/F4385ADE-2733-4A8C-98B6-06B385C6FD6F.png" alt=""><br>当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性，即阻止我们访问，但并不会修改这个属性，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name=<span class="string">"小明"</span>;</div><div class="line">Person.prototype.age=<span class="number">20</span>;</div><div class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person();</div><div class="line">person.name=<span class="string">"jack"</span>;</div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//Jack 来自实例</span></div><div class="line"><span class="keyword">delete</span> person.name;</div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//小明  来自原型</span></div></pre></td></tr></table></figure></p>
<h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>为了从视觉上更好的封装原型的功能和减少不必要的输入，最常见的做法如下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype=&#123;</div><div class="line">  <span class="attr">name</span>:<span class="string">"小明"</span>,</div><div class="line">  <span class="attr">age</span>:<span class="number">20</span>,</div><div class="line">  <span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样创建本质上完全重写了默认的<code>prototype</code>对象，因此<code>constructor</code>属性也就变成了新对象的<code>constructor</code> 属性（指向Object构造函数），如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person()</div><div class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person.constructor == <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(person.constructor == Person); <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>如果<code>constructor</code>真的非常重要，可以向下面这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype=&#123;</div><div class="line">  <span class="comment">//手动将值设为Person 但会导致他的[[Enumerable]]为true</span></div><div class="line">  <span class="keyword">constructor</span>:Person,</div><div class="line">  name:"小明",</div><div class="line">  age:20,</div><div class="line">  sayName : function()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h4><p>重写原型会切断所有原型与任何之前已经存在的对象实例之间的联系，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> friend=<span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">Person.prototype=&#123;</div><div class="line">  <span class="attr">constructor</span>:Person,</div><div class="line">  <span class="attr">name</span>:<span class="string">"小明"</span>,</div><div class="line">  <span class="attr">age</span>:<span class="number">20</span>,</div><div class="line">  <span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">friend.sayName();  <span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p>下图显示了整个过程:<br><img src="/images/A7C98886-1EAC-4C2E-BA60-D8BAF05D5FBC.png" alt=""></p>
<h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p>如果单独使用原型对象，实例就没有了自己的属性，所以我们需要组合使用构造函数模式与原型模式，同时包含了两种花模式的长处，重写以前的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name=name;</div><div class="line">  <span class="keyword">this</span>.age=age;</div><div class="line">  <span class="keyword">this</span>.friends=[<span class="string">'小林'</span>,<span class="string">'小华'</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype=&#123;</div><div class="line">  <span class="attr">constructor</span>:Person,</div><div class="line">  <span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">21</span>);</div><div class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person(<span class="string">'小黑'</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">'王尼玛'</span>);</div><div class="line"><span class="built_in">console</span>.log(person1.friends); <span class="comment">//["小林", "小华", "王尼玛"]</span></div><div class="line"><span class="built_in">console</span>.log(person2.friends); <span class="comment">//["小林", "小华"]</span></div><div class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends); <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><strong><em>这种构造函数与原型模式混成的模式，是目前使用最广泛的、认同最高的一种创建自定义类型的方法</em></strong></p>
<h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p>这种方式把所有信息都封装在了构造函数中，在必要的情况下去初始化原型，如下例子，只有在<code>sayName()</code>不存在的情况下才会初始化原型中的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="comment">//属性</span></div><div class="line">  <span class="keyword">this</span>.name=name;</div><div class="line">  <span class="keyword">this</span>.age=age;</div><div class="line">  <span class="comment">//方法</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>)&#123;</div><div class="line">    Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">21</span>);</div><div class="line">person.sayName();</div></pre></td></tr></table></figure></p>
<h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><p>这和工厂模式写法有点相似，但仔细观察就会发现，是完全不一样的。<br>有点像继承 ，继承Object类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  o.name=name;</div><div class="line">  o.age=age;</div><div class="line">  o.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>我们建议在可以使用其他模式的情况下，尽量不要使用此种方法</em></strong></p>
<h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><p>如下例，在这种方式除了使用<code>sayName</code>方法外，没有其他方法可以访问到name属性。它非常适合在某些安全环境执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="comment">//要返回的对象</span></div><div class="line">  <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  <span class="comment">//在这里定义私有变量和函数</span></div><div class="line"></div><div class="line">  <span class="comment">//添加方法</span></div><div class="line">  o.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//返回对象</span></div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">'小明'</span>,<span class="number">20</span>);</div><div class="line">person.sayName();<span class="comment">//小明</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;p&gt;由于考虑到ECMAScript中无法创建类，所以开发人员发明了一种函数，用函数来封装以特定接口来创建对象的细节，如下；&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createPerson&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  o.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  o.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  o.sayName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person=createPerson(&lt;span class=&quot;string&quot;&gt;&#39;小明&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;特征：解决了创建多个相似对象问题，但却没有解决对象识别的问题，即怎样知道这个对象的类型。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.cquccc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://blog.cquccc.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS对象访问器属性</title>
    <link href="http://blog.cquccc.top/2016/11/22/js-ObjectdefineProperty/"/>
    <id>http://blog.cquccc.top/2016/11/22/js-ObjectdefineProperty/</id>
    <published>2016-11-22T05:25:39.000Z</published>
    <updated>2016-11-22T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>访问器属性不包含数据值，他们包含一对<code>getter</code>和<code>setter</code>函数（但都不是必须的），在读取访问器属性时会调用<code>getter</code>函数，在写入是会调用<code>setter</code>函数。</p>
<h3 id="定义一个访问器属性"><a href="#定义一个访问器属性" class="headerlink" title="定义一个访问器属性"></a>定义一个访问器属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book=&#123;</div><div class="line">  <span class="attr">_year</span>:<span class="number">2004</span>,<span class="comment">//定义数据属性</span></div><div class="line">  edition:<span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义访问器属性</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(book,<span class="string">'year'</span>,&#123;</div><div class="line">  <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.edition=value-<span class="keyword">this</span>._year;</div><div class="line">    <span class="keyword">this</span>._year=value;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">book.year=<span class="number">2006</span>;</div><div class="line"><span class="built_in">console</span>.log(book.edition);<span class="comment">//2</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性:"></a>定义多个属性:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book=&#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperties(book,&#123;</div><div class="line">  <span class="attr">_year</span>:&#123;   <span class="comment">//定义数据属性</span></div><div class="line">    value:<span class="number">2004</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">edition</span>:&#123;</div><div class="line">    <span class="attr">value</span>:<span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//定义访问器属性</span></div><div class="line">  year:&#123;</div><div class="line">    <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.edition=value-<span class="keyword">this</span>._year;</div><div class="line">      <span class="keyword">this</span>._year=value;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;访问器属性不包含数据值，他们包含一对&lt;code&gt;getter&lt;/code&gt;和&lt;code&gt;setter&lt;/code&gt;函数（但都不是必须的），在读取访问器属性时会调用&lt;code&gt;getter&lt;/code&gt;函数，在写入是会调用&lt;code&gt;setter&lt;/code&gt;函数。&lt;/p&gt;
&lt;h3 id=&quot;定义一个访问器属性&quot;&gt;&lt;a href=&quot;#定义一个访问器属性&quot; class=&quot;headerlink&quot; title=&quot;定义一个访问器属性&quot;&gt;&lt;/a&gt;定义一个访问器属性&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; book=&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;_year&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//定义数据属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  edition:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义访问器属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(book,&lt;span class=&quot;string&quot;&gt;&#39;year&#39;&lt;/span&gt;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;get&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;set&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.edition=value-&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year=value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;book.year=&lt;span class=&quot;number&quot;&gt;2006&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(book.edition);&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.cquccc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://blog.cquccc.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS的Function类型</title>
    <link href="http://blog.cquccc.top/2016/11/21/js-create-function/"/>
    <id>http://blog.cquccc.top/2016/11/21/js-create-function/</id>
    <published>2016-11-21T13:37:39.000Z</published>
    <updated>2016-11-22T06:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>每一个函数都是<code>Function</code>类型的事例，也就是每一个函数都是对象，而函数名就是只想这个对象的指针。</p>
<h3 id="定义函数的三种方式"><a href="#定义函数的三种方式" class="headerlink" title="定义函数的三种方式"></a>定义函数的三种方式</h3><p>第一种方法是在其他语言中比较常见的方法。(函数声明)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种定义了一个变量<code>sum</code>并将其初始化为一个函数，想申明其他变量一样末尾也要加上分号。(函数表达式)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum=<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>第三种是使用<code>Function</code>构造函数，<code>Function</code>构造函数可以接受任意数量的参数，最后一个参数始终被看成参数体。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num1"</span>,<span class="string">"num2"</span>,<span class="string">"return num1+num2"</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>由于函数名仅仅是指向函数的指针，所以一个函数可能有多个名字，如下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherSum=sum();</div><div class="line"><span class="built_in">console</span>.log(anotherSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div><div class="line"></div><div class="line">sum=<span class="literal">null</span>;</div><div class="line"><span class="built_in">console</span>.log(anotherSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<h3 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h3><p>由上面的内容，我们知道函数名仅仅是一个指向函数的指针，所以我们可以很容易的理解下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num+<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>));<span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<p>可以看出后面的函数覆盖了前面的函数，即覆盖了第引用的一个还是函数的变量<code>add</code>。</p>
<h3 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h3><p>函数申明与函数表达式其实并不是完全一样的，在解析器向执行环境加载数据时，解析器会率先读取函数声明(一个名为函数名提升的过程)，并使其在执行任何代码前可以访问。以下两个例子说明了两者之间的区别：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以下代码有与第一行代码会导致<code>unexpected identifier</code>(意外标识符)错误，实际也不会执行到下一行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div><div class="line"><span class="keyword">var</span> sum=<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h3><p>由于函数本身就是变量，所以可以从一个函数中返回另一个对象，这其实是一种极为有用的技术。<br>例如假设有一个对象数组，我们要根据某个对象属性进行排序，就可以利用这个技术来实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortData</span>(<span class="params">propertyName</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj1,obj2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> v1=obj1[propertyName];</div><div class="line">    <span class="keyword">var</span> v2=obj2[propertyName];</div><div class="line">    <span class="keyword">if</span>(v1&lt;v2)</div><div class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v1&gt;v2)</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> data=[&#123;<span class="attr">name</span>:<span class="string">"小明"</span>,<span class="attr">age</span>:<span class="number">29</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"小华"</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;];</div><div class="line"></div><div class="line">data.sort(sortData(<span class="string">'age'</span>));</div><div class="line"><span class="built_in">console</span>.log(data[<span class="number">0</span>].name);<span class="comment">//小华</span></div></pre></td></tr></table></figure></p>
<p>在默认情况下，<code>sort()</code>方法会调用每个对象的<code>toString()</code>方法以确定他们的次序，但得到的结果往往并不尽如人意，所以我们调用<code>sortData(propertyName)</code>创建了一个比较函数，一遍按照每个对象的<code>age</code> 属性排序。</p>
<h3 id="函数的内部属性"><a href="#函数的内部属性" class="headerlink" title="函数的内部属性"></a>函数的内部属性</h3><p>在函数内部有两个特殊的对象<code>arguments</code>和<code>this</code>，ECMAScript5规范了另一个函数对象属性<code>caller</code>。</p>
<h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>其中<code>arguments</code>是一个数组类对象，包含传入函数中的所有参数。虽然<code>arguments</code>的主要作用是保存函数参数，但他还有一个叫<code>callee</code>的属性，该属性是一个指向拥有<code>arguments</code>的函数的指针。利用这个属性可以解除紧密耦合的现象，如下面这个阶乘函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">return</span> num*factorial(num<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个函数中函数的执行与函数的<code>factorial</code>紧紧的耦合在了一起，为了消除这种紧密的耦合现象，可以向下面这样使用<code>arguments.callee</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样无论引用函数时使用的是什么名字，都可以保证正常完成递归调用，例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> trueFactorial=factorial;</div><div class="line">factorial=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(trueFactorial(<span class="number">5</span>));<span class="comment">//120</span></div><div class="line"><span class="built_in">console</span>.log(factorial);<span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p><code>this</code>引用的是函数执行环境的对象，当在网页的全局作用域中调用函数<code>this</code>对象引用的就是<code>window</code>对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color=<span class="string">"red"</span>;</div><div class="line"><span class="keyword">var</span> o=&#123;</div><div class="line">  <span class="attr">color</span>:<span class="string">'blue'</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</div><div class="line">&#125;</div><div class="line">sayColor()<span class="comment">//red</span></div><div class="line">o.sayColor=sayColor();</div><div class="line">o.sayColor()<span class="comment">//blue</span></div></pre></td></tr></table></figure></p>
<p>由上面的例子我们可以看出当在全局作用域中调用<code>sayColor()</code>时<code>this</code>引用的是全局对象<code>window</code>,在把函数赋值给对象<code>o</code>并调用是<code>this</code> 引用的对象<code>o</code>。<strong><em>这里要注意的是全局的<code>sayColor</code>函数与<code>o.sayColor()</code>指向的任然是同一个函数</em></strong></p>
<h4 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h4><p><code>caller</code>是调用当前函数的函数的引用，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  inner();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(inner.caller);<span class="comment">//这里输出outer()函数的源代码</span></div><div class="line">  <span class="comment">//为了实现更松散的耦合可以写作arguments.callee.caller</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>在严格模式下运行时，访问<code>arguments.callee</code>会导致错误</em></strong></p>
<h3 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h3><p>每个函数包括两个非继承而来的方法：<code>call()</code>和<code>apply()</code>，这两个函数的作用都是在特定的作用域中调用函数，等于设置函数体内的<code>this</code>值。<br><code>apply</code>接受两个参数，第一个参数是运行函数的作用域，另一个是参数数组。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)<span class="comment">//arguments也可以写成[num1,num2]</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(callSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<p><code>call()</code>函数与<code>apply()</code>在于接收参数的不同，<code>call()</code>除了第一个参数<code>this</code>外 ,传递给函数的参数必须逐个举例出来，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> sum.call(<span class="keyword">this</span>,num1,num2)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(callSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<p>他们真正强大的地方是扩充函数的作用域，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color=<span class="string">"red"</span>;</div><div class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(color);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sayColor.call(<span class="keyword">this</span>) <span class="comment">//red</span></div><div class="line">sayColor.call(o);   <span class="comment">//blue</span></div></pre></td></tr></table></figure></p>
<p>使用这种方法来扩充作用于最大的好处在于对象不需要与方法有任何的耦合关系。</p>
<p>ECMAScript5还定义了一个方法：<code>bind()</code>这个方法会创建一个实例，其this值指向传给他的函数值，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color=<span class="string">"red"</span>;</div><div class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(color);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oSayColor=sayColor.bind(o);</div><div class="line">oSayColor(); <span class="comment">//blue</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个函数都是&lt;code&gt;Function&lt;/code&gt;类型的事例，也就是每一个函数都是对象，而函数名就是只想这个对象的指针。&lt;/p&gt;
&lt;h3 id=&quot;定义函数的三种方式&quot;&gt;&lt;a href=&quot;#定义函数的三种方式&quot; class=&quot;headerlink&quot; title=&quot;定义函数的三种方式&quot;&gt;&lt;/a&gt;定义函数的三种方式&lt;/h3&gt;&lt;p&gt;第一种方法是在其他语言中比较常见的方法。(函数声明)&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num1,num2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1+num2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种定义了一个变量&lt;code&gt;sum&lt;/code&gt;并将其初始化为一个函数，想申明其他变量一样末尾也要加上分号。(函数表达式)&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num1,num2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1+num2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第三种是使用&lt;code&gt;Function&lt;/code&gt;构造函数，&lt;code&gt;Function&lt;/code&gt;构造函数可以接受任意数量的参数，最后一个参数始终被看成参数体。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;num2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;return num1+num2&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.cquccc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://blog.cquccc.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS中没有块级作用域</title>
    <link href="http://blog.cquccc.top/2016/11/17/js-kuaijizuoyongyu/"/>
    <id>http://blog.cquccc.top/2016/11/17/js-kuaijizuoyongyu/</id>
    <published>2016-11-17T13:04:57.000Z</published>
    <updated>2016-11-22T06:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在其他类C语言中由花括号封闭的代码块都有自己的作用域，而<code>JavaScript</code>则没有块级作用域。</p>
<p>如下代码所示，在<code>JavaScript</code>中并不会得到想要的答案。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">  <span class="keyword">var</span> color=<span class="string">"blue"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(color);<span class="comment">//blue</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p> 在<code>JavaScript</code>中，<code>if</code>语句中的变量声明会添加到当前的执行环境（在这里是全局环境）中，在使用<code>for</code>语句时要牢记这一差异，例如：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="comment">//todo</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10</span></div></pre></td></tr></table></figure></p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>使用<code>var</code>声明变量时，变量会自动添加到最接近的环境中。在函数内部最接近的环境就是函数的局部环境。</p>
<p>如果初始化变量时没有使用<code>var</code>声明，该变量会自动添加到全局环境。如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum=num1+num2;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//3</span></div><div class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//由于sum不是有效的变量，由此会导致错误</span></div></pre></td></tr></table></figure></p>
<p>如果省略<code>var</code>声明，执行<code>add()</code>之后，<code>sum</code>也将可以访问，如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  sum=num1+num2;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//3</span></div><div class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<p><strong>通常在编写JavaScript代码中，我们建议在初始化变量前一定要声明，否则可能会导致意外</strong></p>
<h3 id="查询标识符"><a href="#查询标识符" class="headerlink" title="查询标识符"></a>查询标识符</h3><p>当在某个环境中为了读取或写入而引入一个标示符时，必须通过搜索来确定此标识符实际代表什么。<br>搜索过程从作用域链的前端开始，向上逐级查询。</p>
<p>下面这个例子，可以展现查询标识符的过程:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color=<span class="string">"blue"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> color=<span class="string">'red'</span>;</div><div class="line">  <span class="keyword">return</span> color;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getColor());<span class="comment">//red</span></div><div class="line"><span class="built_in">console</span>.log(color);<span class="comment">//blue</span></div></pre></td></tr></table></figure></p>
<p><strong>很明显从中可以看出访问局部变量要比访问全局变量快</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在其他类C语言中由花括号封闭的代码块都有自己的作用域，而&lt;code&gt;JavaScript&lt;/code&gt;则没有块级作用域。&lt;/p&gt;
&lt;p&gt;如下代码所示，在&lt;code&gt;JavaScript&lt;/code&gt;中并不会得到想要的答案。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color=&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(color);&lt;span class=&quot;comment&quot;&gt;//blue&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.cquccc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://blog.cquccc.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS中基本类型和引用类型</title>
    <link href="http://blog.cquccc.top/2016/11/16/1611161/"/>
    <id>http://blog.cquccc.top/2016/11/16/1611161/</id>
    <published>2016-11-16T14:04:57.000Z</published>
    <updated>2016-11-22T06:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>基本类型值指的是简单的数据段</li>
<li>引用类型值指那些可能由多个值的构成的对象。</li>
</ul>
<a id="more"></a>
<h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>我们不能给基本类型的值添加属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person;</div><div class="line">person.name=<span class="string">"Jack"</span>;log</div><div class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>可以添加、改变、删除引用类型的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> object();</div><div class="line">person.name=<span class="string">"Jack"</span>;</div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//Jack</span></div></pre></td></tr></table></figure></p>
<h3 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h3><h4 id="基本类型-1"><a href="#基本类型-1" class="headerlink" title="基本类型"></a>基本类型</h4><p>复制基本类型的值时，会在变量对象上创建一个新的值，然后把该值复制到为新变量分配的位置上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1=<span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> num2=num1;</div><div class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//5</span></div></pre></td></tr></table></figure></p>
<h4 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h4><p>复制引用类型的值时与基本类型一样，不同的是复制的新值实际上是一个指针，而这个指针指向存储在堆中的对象。</p>
<p>如下面例子所示连个变量其实将引用同一个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> obj2=obj1;</div><div class="line">obj2.name=<span class="string">"Jack"</span>;</div><div class="line"><span class="built_in">console</span>.log(obj1.name);<span class="comment">//Jack</span></div></pre></td></tr></table></figure></p>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><h4 id="基本类型-2"><a href="#基本类型-2" class="headerlink" title="基本类型"></a>基本类型</h4><p>在传递基本类型时，传递的值会被赋值给一个局部变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  obj.name=<span class="string">"Jack"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//Jack</span></div></pre></td></tr></table></figure></p>
<h4 id="引用类型-2"><a href="#引用类型-2" class="headerlink" title="引用类型"></a>引用类型</h4><p>如下所示，变量被传递到<code>setName()</code>之后就被复制给了obj，在函数内部obj和person引用的是同一个对象，即是说这个变量是按值传递的，obj也会按引用来访问同一对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  obj.name=<span class="string">"Jack"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//Jack</span></div></pre></td></tr></table></figure></p>
<p>由下面的例子我们可以看到，如果person是按引用传递的，那么输出的应该是’Greg’。这说明即是在函数内部修改了参数的值，但原始的引用任然未变。实际上在函数内部重写obj时，这个变量引用的就是一个局部对象了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  obj.name=<span class="string">"Jack"</span>;</div><div class="line">  obj=<span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  obj.name=<span class="string">"Greg"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//Jack</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;基本类型值指的是简单的数据段&lt;/li&gt;
&lt;li&gt;引用类型值指那些可能由多个值的构成的对象。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.cquccc.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://blog.cquccc.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>误删mysql数据之后 ，恢复数据的的方法</title>
    <link href="http://blog.cquccc.top/2016/11/13/recoverMysqlData/"/>
    <id>http://blog.cquccc.top/2016/11/13/recoverMysqlData/</id>
    <published>2016-11-13T14:44:02.000Z</published>
    <updated>2016-11-16T14:08:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用mysql的二进制日志记录文件来恢复数据</p>
<p>就在昨天我在修改线上数据库字段的时候 ，改了一个不合适的字段长度，导致数据丢失，我立马关闭了网站，开始恢复数据。期初很慌张，以前没遇到过这种问题 。后来慢慢爬文，知道可以利用数据库二进制日志文件来恢复数据。于是我利用PHP来解析二进制文件找回了数据。<br><a id="more"></a></p>
<h3 id="开启二进制日志记录文件"><a href="#开启二进制日志记录文件" class="headerlink" title="开启二进制日志记录文件"></a>开启二进制日志记录文件</h3><p> 所幸数据库默认开启了二进制日志记录文件，不然我的数据全没了，损失很大，如果没开启可以用以下方式开启：</p>
<p> 编辑my.cnf，添加:<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log-bin=/<span class="keyword">var</span>/log/mysql/mysql-bin.log</div></pre></td></tr></table></figure></p>
<p>开启日志后需要<code>myssqladmin flush logs</code>才能生效。</p>
<p>需要注意的是log-bin指定扩展名是无效的，当mysql创建二进制日志文件时，首先创建一个以“mysql_log_bin”为名称，以“.index”为后缀的文件；再创建一个以“mysql_log_bin”为名称，以 ‘.000001’为后缀的文件。当mysql服务重新启动一次以“.000001”为后缀的文件会增加一个，并且后缀名加1递增；如果日志长度超过了 max_binlog_size的上限（默认是1G）也会创建一个新的日志文件；使用<code>flush logs</code>（mysql命令符）或者执行<code>mysqladmin –u –p flush-logs</code>（windows命令提示符）也会创建一个新的日志文件。</p>
<h3 id="解析二进制文件中的sql语句"><a href="#解析二进制文件中的sql语句" class="headerlink" title="解析二进制文件中的sql语句"></a>解析二进制文件中的sql语句</h3><p>首先找到二进制文件，打开后会发现里面有很多SQL语句，但是很乱，有插入语句，跟新语句，还有一些其他日志记录的标志，在这里我只需要插入到order表中的数据 ，所以以此为例，编写php来解析我需要的sql插入语句。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSql</span><span class="params">()</span></span>&#123;</div><div class="line">  $s = preg_quote(“INSERT INTO order (price,type,uid,info,subtime) VALUES (“);</div><div class="line">  $str= file_get_contents(<span class="string">'/usr/data/mysql-bin.000013'</span>);</div><div class="line">  preg_match_all(<span class="string">'/\&#123;.*?\&#125;/'</span>,$str,$arr);</div><div class="line">  <span class="keyword">return</span> $arr[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行这个函数返回一个数组，这个数组里面就是二进制文件中所有向order表中插入数据的SQL语句。然后在循环执行数组中的SQL语句至此所有数据就恢复了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用mysql的二进制日志记录文件来恢复数据&lt;/p&gt;
&lt;p&gt;就在昨天我在修改线上数据库字段的时候 ，改了一个不合适的字段长度，导致数据丢失，我立马关闭了网站，开始恢复数据。期初很慌张，以前没遇到过这种问题 。后来慢慢爬文，知道可以利用数据库二进制日志文件来恢复数据。于是我利用PHP来解析二进制文件找回了数据。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.cquccc.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="http://blog.cquccc.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>thinkPHP整合微信公众号支付</title>
    <link href="http://blog.cquccc.top/2016/11/13/thinkphpWeixinPay/"/>
    <id>http://blog.cquccc.top/2016/11/13/thinkphpWeixinPay/</id>
    <published>2016-11-13T14:42:19.000Z</published>
    <updated>2016-11-16T14:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>给thinkphp添加扩展实现微信支付，基于官方微信支付的Demo开发</p>
<p>些此篇文章的原因主要是最近在做有关微信支付的开发，由于初次开发走了很多弯路，所以整理了一下写下这篇文章，参考文章thinkphp整合系列之微信公众号支付（来自白俊遥博客<a href="http://baijunyao.com）由于他的源码有点问题，所以我做了一些修改，整个项目我也fork过来了。" target="_blank" rel="external">http://baijunyao.com）由于他的源码有点问题，所以我做了一些修改，整个项目我也fork过来了。</a></p>
<p>项目地址：<a href="http://git.oschina.net/crazy_boy/thinkphp-bjyadmin" target="_blank" rel="external">http://git.oschina.net/crazy_boy/thinkphp-bjyadmin</a> ，里面整合了很多扩展都可以参考。</p>
<p>由于大致用法原文里面都有，一下写一些原文中没有讲清楚或没有讲到的东西。<br><a id="more"></a></p>
<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p><code>/Application/Common/Conf/config.php</code>源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'WEIXINPAY_CONFIG'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">    <span class="string">'APPID'</span>              =&gt; <span class="string">''</span>, <span class="comment">// 微信支付APPID  </span></div><div class="line">    <span class="string">'MCHID'</span>              =&gt; <span class="string">''</span>, <span class="comment">// 微信支付MCHID 商户收款账号</span></div><div class="line">    <span class="string">'KEY'</span>                =&gt; <span class="string">''</span>, <span class="comment">// 微信支付KEY      </span></div><div class="line">    <span class="string">'APPSECRET'</span>          =&gt; <span class="string">''</span>, <span class="comment">// 公众帐号secert (公众号支付专用)</span></div><div class="line">    <span class="string">'NOTIFY_URL'</span>         =&gt; <span class="string">'http://域名/Home/Weixinpay/notify'</span>, <span class="comment">// 接收支付状态的连接</span></div><div class="line">  ),</div></pre></td></tr></table></figure></p>
<p>其中NITIFY_URL是支付成功后微信返回支付结果的一个连接，在我的测试中，只有在支付成功后微信才会向此链接放回结果，其中要特别注意的一点是此链接不能带有任何的参数，如这种连接是不行的:<code>http://域名/index.php/Home/Weixinpay/notify</code>。</p>
<p>微信支付key需要在微信商户平台中设置。（账户中心-&gt;API安全）</p>
<h3 id="异步接收通知"><a href="#异步接收通知" class="headerlink" title="异步接收通知"></a>异步接收通知</h3><p>这个讲到的就是上面提到的<code>notify_url</code>，源码如下，由于是微信异步请求的链接，所以切记不要用session来操作，因为他是访问不了的，微信会放回订单号<code>out_trade_no</code>。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">// 导入微信支付sdk</span></div><div class="line">      Vendor(<span class="string">'Weixinpay.Weixinpay'</span>);</div><div class="line">      $wxpay=<span class="keyword">new</span> \Weixinpay();</div><div class="line">      $result=$wxpay-&gt;notify();</div><div class="line">      <span class="keyword">if</span> ($result) &#123;</div><div class="line">          <span class="comment">// 验证成功 修改数据库的订单状态等 $result['out_trade_no']为订单id</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="订单号-out-trade-no"><a href="#订单号-out-trade-no" class="headerlink" title="订单号$out_trade_no"></a>订单号$out_trade_no</h3><p>这个订单号是由你自己来生成的，官方推荐的方式是时间+字符串的方式，time()+uid，即当前时间+用户id这是我的做法。生成好之后直接生成订单并存入数据库，下面是我的源码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">js</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// 此处根据实际业务情况生成订单 然后拿着订单去支付</span></div><div class="line">    <span class="comment">// 用时间戳虚拟一个订单号  （请根据实际业务更改）</span></div><div class="line">    session(<span class="string">'total_fee'</span>,I(<span class="string">'get.total_fee'</span>));</div><div class="line">    $order[<span class="string">'id'</span>]=$out_trade_no;</div><div class="line">    $order[<span class="string">'uid'</span>]=session(<span class="string">'id'</span>);</div><div class="line">    $order[<span class="string">'amount'</span>]=I(<span class="string">'get.total_fee'</span>);</div><div class="line">    M(<span class="string">'order'</span>)-&gt;add($order);</div><div class="line">    <span class="comment">// 组合url</span></div><div class="line">    $url=U(<span class="string">'Wx/pay'</span>,<span class="keyword">array</span>(<span class="string">'out_trade_no'</span>=&gt;$out_trade_no));</div><div class="line">    <span class="comment">// 前往支付</span></div><div class="line">    <span class="keyword">$this</span>-&gt;redirect($url);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后修改<code>/ThinkPHP/Library/Vendor/Weixinpay/Weixinpay.php</code> 的170行，用获得的订单号查询订单信息，并传入，源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$order=M(<span class="string">'order'</span>)-&gt;find($out_trade_no);</div><div class="line">$order=<span class="keyword">array</span>(</div><div class="line">    <span class="string">'body'</span>=&gt;“充值”.$order[<span class="string">'amount'</span>].<span class="string">'元'</span>,<span class="comment">// 商品描述（需要根据自己的业务修改</span></div><div class="line">    <span class="string">'total_fee'</span>=&gt;$order[<span class="string">'amount'</span>]*<span class="number">100</span>,<span class="comment">// 订单金额  以(分)为单位（需要根据自己的业务修改</span></div><div class="line">    <span class="string">'out_trade_no'</span>=&gt;$out_trade_no,<span class="comment">// 订单号（需要根据自己的业务修改）</span></div><div class="line">    <span class="string">'product_id'</span>=&gt;<span class="string">'1'</span>,<span class="comment">// 商品id（需要根据自己的业务修改）</span></div><div class="line">    <span class="string">'trade_type'</span>=&gt;<span class="string">'JSAPI'</span>,<span class="comment">// JSAPI公众号支付</span></div><div class="line">    <span class="string">'openid'</span>=&gt;$openid<span class="comment">// 获取到的openid</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="html配合使用"><a href="#html配合使用" class="headerlink" title="html配合使用"></a>html配合使用</h3><p>html的配合：<code>/tpl/Home/Weixinpay/pay.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>充值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"all_w "</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ttwenz"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>确认交易<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span>微信安全支付<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wenx_xx"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mz"</span>&gt;</span>充值<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wxzf_price"</span>&gt;</span>￥&#123;:session("total_fee")&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"skf_xinf"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"all_w"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bt"</span>&gt;</span>收款方<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fr"</span>&gt;</span>商家名字<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"pay()"</span> <span class="attr">class</span>=<span class="string">"ljzf_but all_w"</span>&gt;</span>确认支付<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data=&#123;$data&#125;;</div><div class="line">    WeixinJSBridge.invoke(</div><div class="line">        <span class="string">'getBrandWCPayRequest'</span>, data,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> ) &#123;</div><div class="line">              alert(<span class="string">'支付成功!'</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">              alert(<span class="string">'支付失败!'</span>);</div><div class="line">            &#125;</div><div class="line">            history.go(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pay</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</div><div class="line">      <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</div><div class="line">          <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady, <span class="literal">false</span>);</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</div><div class="line">          <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady);</div><div class="line">          <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, onBridgeReady);</div><div class="line">      &#125;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">       onBridgeReady();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给thinkphp添加扩展实现微信支付，基于官方微信支付的Demo开发&lt;/p&gt;
&lt;p&gt;些此篇文章的原因主要是最近在做有关微信支付的开发，由于初次开发走了很多弯路，所以整理了一下写下这篇文章，参考文章thinkphp整合系列之微信公众号支付（来自白俊遥博客&lt;a href=&quot;http://baijunyao.com）由于他的源码有点问题，所以我做了一些修改，整个项目我也fork过来了。&quot;&gt;http://baijunyao.com）由于他的源码有点问题，所以我做了一些修改，整个项目我也fork过来了。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;http://git.oschina.net/crazy_boy/thinkphp-bjyadmin&quot;&gt;http://git.oschina.net/crazy_boy/thinkphp-bjyadmin&lt;/a&gt; ，里面整合了很多扩展都可以参考。&lt;/p&gt;
&lt;p&gt;由于大致用法原文里面都有，一下写一些原文中没有讲清楚或没有讲到的东西。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.cquccc.top/categories/PHP/"/>
    
    
      <category term="thinkPHP" scheme="http://blog.cquccc.top/tags/thinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>设置Apache，实现一个空间多个域名</title>
    <link href="http://blog.cquccc.top/2016/11/13/setApacheConfig/"/>
    <id>http://blog.cquccc.top/2016/11/13/setApacheConfig/</id>
    <published>2016-11-13T14:27:27.000Z</published>
    <updated>2016-11-16T14:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>此方法利用apache的<code>mod_rewrite</code>模块，实现修改map文件添加域名且不用重启Apache</p>
<a id="more"></a>
<h4 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h4><ol>
<li>去除httpd.conf文件中<code>#LoadModule rewrite_module modules/mod_rewrite.so</code>前面的”#”号;</li>
<li><p>然后再在httpd.conf最后书写如下规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteMap lowercase int:tolower</div><div class="line">RewriteMap vhost txt:/usr/local/etc/apache/vhost.map</div><div class="line">RewriteCond $&#123;lowercase:%&#123;SERVER_NAME&#125;&#125; ^(.+)$</div><div class="line">RewriteCond $&#123;vhost:%1&#125; ^(/.)$ \r\nRewriteRule ^/(.)$ %1/$1</div></pre></td></tr></table></figure>
</li>
<li><p>其中的 <code>/usr/local/etc/apache</code> 是你的 apache 服务器配置文件所在路径，根据实际情况更改（例如在/etc/httpd/下面）。然后，在这个所在路径的目录下创建一个文件： vhost.map，内容格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#你需要添加的域名    网站路径</div><div class="line">blog.muzishg.com  /usr/local/apache/htdocs/blog</div></pre></td></tr></table></figure>
</li>
<li><p>最后重启Apache服务器，之后需要再添加域名时只需要修改vhost.map文件，无需重启Apache，所有域名只需解析一条a记录到该服务器的外网IP上</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此方法利用apache的&lt;code&gt;mod_rewrite&lt;/code&gt;模块，实现修改map文件添加域名且不用重启Apache&lt;/p&gt;
    
    </summary>
    
      <category term="Apache" scheme="http://blog.cquccc.top/categories/Apache/"/>
    
    
      <category term="Apache" scheme="http://blog.cquccc.top/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>生活</title>
    <link href="http://blog.cquccc.top/2016/11/13/%E7%94%9F%E6%B4%BB/"/>
    <id>http://blog.cquccc.top/2016/11/13/生活/</id>
    <published>2016-11-13T13:07:07.000Z</published>
    <updated>2016-11-22T06:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">生活不止眼前的苟且，还有诗和远方</blockquote>

<a id="more"></a>
<h3 id="生命在于折腾"><a href="#生命在于折腾" class="headerlink" title="生命在于折腾"></a>生命在于折腾</h3><p>折腾来折腾去，又用hexo在github上重新建了这个博客，希望自己坚持下去吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;生活不止眼前的苟且，还有诗和远方&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.cquccc.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
